name: Play GitTerra
run-name: Playing üåé GitTerra on ${{ github.repository }} üó∫Ô∏è

on:
  push:
    branches:
      - main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  play-gitterra:
    runs-on: ubuntu-latest
    steps:
      - name: Play GitTerra üéÆ
        uses: GitTerraGame/Play-GitTerra-Action@main
  deploy-gitterra-to-gh-pages:
    if: github.ref == 'refs/heads/main'
    needs: play-gitterra
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: gitterra
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  add-comment:
    runs-on: ubuntu-latest
    needs: deploy-gitterra-to-gh-pages

    steps:
      - name: Find Merged Pull Request
        id: find-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const mergeCommitSha = context.sha; // The SHA of the commit that triggered the push
  
            console.log(`Searching for PRs merged with commit SHA: ${mergeCommitSha}`);
  
            // Fetch recently closed PRs that were merged into the current branch.
            // We limit to 10 to avoid excessive API calls for very active repos.
            // Sorting by 'updated' in descending order helps find the most recent relevant PRs first.
            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'closed',
              base: context.ref.replace('refs/heads/', ''), // The branch that was pushed to (e.g., 'main')
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
  
            let prNumber = null;
            let prTitle = null;
  
            // Iterate through the fetched PRs to find one whose merge_commit_sha matches the pushed SHA.
            for (const pull of pulls.data) {
              // Check if the PR was actually merged and its merge commit SHA matches the current push SHA.
              if (pull.merged_at && pull.merge_commit_sha === mergeCommitSha) {
                prNumber = pull.number;
                prTitle = pull.title;
                console.log(`Found merged PR #${prNumber}: ${prTitle}`);
                break; // Found the matching PR, no need to continue searching
              }
            }
  
            // Set the output 'pr_number' if a matching PR was found.
            // This output can be used by subsequent steps.
            if (prNumber) {
              core.setOutput('pr_number', prNumber);
            } else {
              console.log('No merged Pull Request found for this push event matching the commit SHA.');
            }
      - name: Get GitHub Pages Site Information
        id: get-pages-info
        if: steps.find-pr.outputs.pr_number
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            let githubPagesUrl = null;
  
            try {
              // Call the GitHub API to get information about the Pages site.
              const { data: pagesInfo } = await github.rest.repos.getPages({ owner, repo });
              githubPagesUrl = pagesInfo.html_url;
              console.log(`GitHub Pages URL fetched: ${githubPagesUrl}`);
            } catch (error) {
              console.error(`Failed to get GitHub Pages info: ${error.message}`);
              // If fetching fails, fall back to constructing the URL manually.
              // This ensures the action still works even if the API call fails or Pages isn't configured yet.
              const repoOwnerLower = owner.toLowerCase();
              const repoNameLower = repo.toLowerCase();
              githubPagesUrl = `https://${repoOwnerLower}.github.io/${repoNameLower}/`;
              console.log(`Falling back to constructed URL: ${githubPagesUrl}`);
            }
  
            // Set the output 'github_pages_url' for subsequent steps.
            core.setOutput('github_pages_url', githubPagesUrl);
      - name: Get GitHub Pages URL and Prepare Comment
        id: prepare-comment
        if: steps.find-pr.outputs.pr_number
        run: |
          # Get the GitHub Pages URL from the output of the 'get-pages-info' step.
          GITHUB_PAGES_URL="${{ steps.get-pages-info.outputs.github_pages_url }}"

          # Get the Pull Request number from the output of the 'find-pr' step.
          PR_NUMBER=${{ steps.find-pr.outputs.pr_number }}

          # Define the comment body.
          # We use a multi-line string for better readability.
          COMMENT_BODY="![GitTerra Logo](https://gitterra.com/images/logo.png) GitTerra map of your world is ready: ${GITHUB_PAGES_URL}"

          # Set outputs that can be used by subsequent steps.
          # 'comment_body' will contain the full text of the comment.
          # 'pr_number' will contain the number of the PR to comment on.
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "${COMMENT_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
      - name: Add comment to Pull Request
        if: steps.find-pr.outputs.pr_number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.prepare-comment.outputs.pr_number }},
              body: "${{ steps.prepare-comment.outputs.comment_body }}"
            })
